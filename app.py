import streamlit as st
from PIL import Image
import datetime
from gtts import gTTS
import openai, random , os
from textblob import TextBlob

from utils.pdf_summary import summarize_pdf
from utils.csv_analysis import analyze_csv
from utils.book_recommendation import recommend_books
from utils.content_generator import generate_content
from utils.cv_analysis import analyze_cv
from utils.document_search import search_documents
from utils.Recherche_Documentaire import RechercheDocumentaireWeb
from utils.search_documents import search_documents
from utils.medical_search import search_medical_articles, generate_medical_response

from dotenv import load_dotenv
# Chargez les variables d'environnement √† partir du fichier .env
load_dotenv()

# Configuration de la page
st.set_page_config(
    page_title="Bienvenue Infinity AI",
    page_icon="‚ôæÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Style pour le titre anim√© :)
st.markdown(
    """
    <style>
    .title {
        font-size: 3em;
        color: #ef9900;  
        text-align: left;
        animation: fadeIn 5s;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    </style>
    <h1 class="title">Bienvenue sur Infinity AI ‚ôæÔ∏è</h1>
    """,
    unsafe_allow_html=True
)


# D√©finir le style CSS personnalis√©
custom_css = """
<style>
    [data-testid=stSidebar] {
        background-color: #0D1117;
    }
</style>
"""

# Appliquer le style CSS personnalis√©
st.markdown(custom_css, unsafe_allow_html=True)

# Define the themes #A6A957
themes = {
    "Dark Mode": {
        "background-color": "#0D1117",   
        "color": "#FFFFFF",
        "button-background-color": "#FFFFFF",
        "button-color": "#1E1E1E",
        "button-box-shadow": "0 0 10px #FFFFFF",
        "sidebar-background-color": "#0D1117",
        "sidebar-color": "#FFFFFF",
        "sidebar-box-shadow": "0 0 10px #FFFFFF",
    },
    "Rose":  {
        "background-color": "#0D1117",
        "color": "#FFFFFF",
        "button-background-color": "#cf1e4e",
        "button-color": "#000000",
        "button-box-shadow": "0 0 10px #cf1e4e",
        "sidebar-background-color": "#0D1117",
        "sidebar-color": "#cf1e4e",
        "sidebar-box-shadow": "0 0 10px #cf1e4e",
    },
    "Gaming": {
        "background-color": "#0D1117",
        "color": "#FFFFFF",
        "button-background-color": "#ef9900",
        "button-color": "#1F1F1F",
        "button-box-shadow": "0 0 10px #ef9900",
        "sidebar-background-color": "#0D1117",
        "sidebar-color": "#FFD700",
        "sidebar-box-shadow": "0 0 10px #FFD700",
    },
    "Neon": {
        "background-color": "#0D1117",  
        "color": "#FFFFFF",
        "button-background-color": "#00c599",
        "button-color": "#1A1A1D",
        "button-box-shadow": "0 0 20px #00c599",
        "sidebar-background-color": "#0D1117",
        "sidebar-color": "#00c599",
        "sidebar-box-shadow": "0 0 20px #00c599",
    },
}


# Set the initial theme #0D1117
theme = "Dark Mode"

# Define a function to update the theme
def update_theme(theme):
    st.markdown(f"""
        <style>
        .stApp {{
            background-color: {themes[theme]['background-color']};
            color: {themes[theme]['color']};
            font-family: 'Courier New', Courier, monospace;
        }}
        .stButton>button {{
            background-color: {themes[theme]['button-background-color']};
            color: {themes[theme]['button-color']};
            font-weight: bold;
            border-radius: 10px;
            padding: 10px 20px;
            transition: all 0.3s ease;
            box-shadow: {themes[theme]['button-box-shadow']};
        }}
        .stButton>button:hover {{
            background-color: {themes[theme]['button-color']};
            color: {themes[theme]['button-background-color']};
            border: 2px solid {themes[theme]['button-background-color']};
            box-shadow: 0 0 20px {themes[theme]['button-background-color']};
        }}
        .stSidebar {{
            background-color: {themes[theme]['sidebar-background-color']};
            color: {themes[theme]['sidebar-color']};
            box-shadow: {themes[theme]['sidebar-box-shadow']};
        }}
        </style>
    """, unsafe_allow_html=True)

# Chargement des images
logo = Image.open("assets/logo.png")
#banner = Image.open("assets/Banniere.gif")

# Affichage du logo et de la banni√®re
st.sidebar.image(logo, width=300)
#st.image(banner, use_column_width=True)

# Add a theme selection dropdown menu to the sidebar
selected_theme = st.sidebar.selectbox("üé® Choisissez un th√®me", list(themes.keys()), index=0)
update_theme(selected_theme)

#st.title("Bienvenue sur Infinity AI")

st.markdown("""
**Infinity AI** est une plateforme aliment√©e par une intelligence artificielle avanc√©e, con√ßue pour booster votre cr√©ativit√© et votre productivit√©. Elle offre une large gamme de fonctionnalit√©s pour accompagner les √©tudiants, les cr√©ateurs, chercheurs et les entreprises dans leurs projets :
""")
def generate_response(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response['choices'][0]['message']['content']

# Initialiser le contexte de la conversation
if 'context' not in st.session_state:
    st.session_state.context = []

# Zone de conversation
conversation = st.empty()

def update_conversation():
    conversation.text_area("üìú **Historique de la conversation**", 
                           value="\n".join([f"{msg['role'].capitalize()}: {msg['content']}" for msg in st.session_state.context]),
                           height=300)

# Fonction pour analyser le sentiment
def analyze_sentiment(text):
    blob = TextBlob(text)
    sentiment = blob.sentiment.polarity
    if sentiment > 0.1:
        return "positif"
    elif sentiment < -0.1:
        return "n√©gatif"
    else:
        return "neutre"
    
# Fonction pour interroger l'API OpenAI avec contexte
def ask_openai(prompt, context):
    messages = [{"role": "system", "content": "Vous √™tes un assistant vocal futuriste, intelligent et serviable."}]
    messages.extend(context)
    messages.append({"role": "user", "content": prompt})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=1000,
        n=1,
        stop=None,
        temperature=0.7,
    )
    return response.choices[0].message.content.strip()
# Fonction pour g√©n√©rer une r√©ponse de l'assistant IA
def generate_ai_response(user_input):
    """G√©n√®re une r√©ponse de l'assistant IA √† partir de l'entr√©e de l'utilisateur."""
    try:
        openai.api_key = os.getenv("OPENAI_API_KEY")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Vous √™tes un assistant utile, intelligent et respectueux qui aide les utilisateurs √† r√©soudre leurs probl√®mes et √† atteindre leurs objectifs."},
                {"role": "user", "content": user_input},
            ],
            max_tokens=2000,
            n=1,
            stop=None,
            temperature=0.7,
        )
        answer = response.choices[0].message['content'].strip()
        return answer
    except Exception as e:
        return f"‚ö†Ô∏è Une erreur est survenue : {e}"

# Onglets pour choisir ce qu'il te convient
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(["üìù R√©sum√© de PDF", "üìä Analyse de CSV", "üìö Recommandation de Livre", "üìù G√©n√©rateur de Contenu", "üìÑ Analyse de CV", "üîç cherchez dans un document",  "‚è© Suivant"])


# Fonctionnalit√© : R√©sum√© de PDF
with tab1:
    st.header("üìù R√©sum√© de PDF")
    uploaded_file = st.file_uploader("üìÇ T√©l√©chargez votre fichier PDF", type="pdf")
    
    if uploaded_file is not None:
        with st.spinner("‚è≥ R√©sum√© en cours..."):
            summary = summarize_pdf(uploaded_file)
        
        if "Erreur" in summary:
            st.error(summary)
        else:
            st.subheader("üìÑ R√©sum√© :")
            st.write(summary)


# Fonctionnalit√© : Analyse de CSV
with tab2:
    st.header("üìä Analyse de Fichier CSV")
    uploaded_file = st.file_uploader("üìÇ T√©l√©chargez votre fichier CSV", type="csv")
    
    if uploaded_file is not None:
        with st.spinner("‚è≥ Analyse en cours..."):
            analysis = analyze_csv(uploaded_file)
        
        if "error" in analysis:
            st.error(analysis["error"])
        else:
            st.subheader("üìã R√©sum√© statistique :")
            st.dataframe(analysis['data'])
       
            st.subheader("üí° Analyse IA :")
            st.write(analysis['ai_analysis'])

# Fonctionnalit√© : Recommandation de Livre
with tab3:
    st.header("üìö Recommandation de Livre")
    genre = st.text_input("Entrez votre genre pr√©f√©r√© :", "Science-fiction")
    
    if st.button("Recommander"):
        with st.spinner("üîç Recherche de recommandations..."):
            recommendations = recommend_books(genre)
        st.subheader("üìñ Livres Recommand√©s :")
        for book in recommendations:
            st.write(f"- {book}")


# Fonctionnalit√© : G√©n√©rateur de Contenu
with tab4:
    st.header("üìù G√©n√©rateur de Contenu")
    
    subject = st.text_input("üí° Entrez le sujet :", "Intelligence Artificielle")
    
    if st.button("üöÄ G√©n√©rer le Contenu"):
        with st.spinner("‚è≥ G√©n√©ration du contenu en cours..."):
            content = generate_content(subject)
        
        if "Erreur" in content:
            st.error(content)
        else:
            st.subheader("üìÑ Contenu G√©n√©r√© :")
            st.write(content)

# Fonctionnalit√© : Analyse de CV
with tab5:
    st.header("üîç Analyse de CV")
    
    uploaded_file = st.file_uploader("üìÇ T√©l√©chargez votre CV (PDF)", type="pdf")
    
    if uploaded_file is not None:
        with st.spinner("‚è≥ Analyse du CV en cours..."):
            analysis = analyze_cv(uploaded_file)
        
        if "Erreur" in analysis:
            st.error(analysis)
        else:
            st.subheader("üìù R√©sultats de l'Analyse du CV :")
            st.write(analysis)

# Fonctionnalit√© : Recherche dans les Documents
with tab6:
    st.header("üîç Recherche dans les Documents")

    uploaded_files = st.file_uploader("üìÇ T√©l√©chargez vos documents (PDF, TXT)", type=["pdf", "txt"], accept_multiple_files=True)

    if uploaded_files:
        user_question = st.text_input("üí¨ Posez votre question sur les documents t√©l√©charg√©s :")

        if st.button("üîé Rechercher"):
            if user_question:
                with st.spinner("‚è≥ Recherche en cours..."):
                    answer = search_documents(uploaded_files, user_question)
                
                if "Erreur" in answer:
                    st.error(answer)
                else:
                    st.subheader("üìÑ R√©ponse :")
                    st.write(answer)
            else:
                st.warning("‚ö†Ô∏è Veuillez entrer une question.")
    else:
        st.info("‚ÑπÔ∏è Veuillez t√©l√©charger des documents pour commencer.")


# Chatbot pour FAQ d‚ÄôEntreprise
with tab7:
    tabs = st.tabs([
    "‚öïÔ∏è Recherche M√©dicale",
    "üîç Recherche Documentaire",
    "ü§ñ IA Entreprise",
    "üí¨ Chat √âcrit"])

    # Fonctionnalit√© : Moteur de Recherche M√©dicale
    with tabs[0]: 
        st.header("ü©∫ Moteur de Recherche M√©dicale")

        question_med = st.text_input("üí¨ Posez votre question m√©dicale :")

        if st.button("üîé Rechercher M√©dicale"):
            if question_med:
                with st.spinner("‚è≥ Recherche en cours dans les bases de donn√©es m√©dicales..."):
                    context_med = search_medical_articles(question_med)
                    
                if "Erreur" in context_med:
                    st.error(context_med)
                else:
                    with st.spinner("‚è≥ G√©n√©ration de la r√©ponse m√©dicale..."):
                        answer_med = generate_medical_response(context_med, question_med)

                    if "Erreur" in answer_med:
                        st.error(answer_med)
                    else:
                        st.subheader("üìÑ R√©ponse :")
                        st.write(answer_med)
            else:
                st.warning("‚ö†Ô∏è Veuillez entrer une question m√©dicale.")

    # Cr√©er un onglet pour la recherche web
    with tabs[1]:
        st.header("üîç Recherche Documentaire Web")

        # Champ de recherche
        requete = st.text_input("Entrez votre requ√™te de recherche :")

        # Bouton de recherche
        if st.button("Rechercher"):
            if not requete:
                st.error("Veuillez entrer une requ√™te de recherche.")
            else:
                with st.spinner("Recherche en cours sur Internet..."):
                    # Cr√©er une instance de la classe RechercheDocumentaireWeb
                    recherche = RechercheDocumentaireWeb()
                    resultats = recherche.rechercher_sur_internet(requete)

                    if not resultats:
                        st.info("üîç Aucun document pertinent trouv√©.")
                    else:
                        st.success(f"üéâ {len(resultats)} document(s) pertinent(s) trouv√©(s) sur Internet!")
                        for i, doc in enumerate(resultats, 1):
                            with st.expander(f"üìÑ {doc['titre']}"):
                                st.write(f"üîó Lien : {doc['lien']}")
                                st.write(f"üìù Extrait : {doc['extrait']}")

        # Section de l'assistant IA
    with tabs[2]:
        st.header("ü§ñ Assistant IA")

        user_input = st.text_input("üí¨ Posez une question ou d√©crivez votre projet :", "")

        if st.button("‚ú® G√©n√©rer une r√©ponse"):
            if user_input:
                with st.spinner("‚è≥ G√©n√©ration de la r√©ponse..."):
                    answer = generate_ai_response(user_input)
                    st.subheader("üìÑ R√©ponse :")
                    st.write(answer)
            else:
                st.warning("‚ö†Ô∏è Veuillez entrer une question ou une description.")
    
    # Section de l'assistant IA
    with tabs[3]:
        # Zone de saisie de texte
        user_input = st.text_input("üìù √âcrivez votre message ici")

        # Si l'utilisateur veut envoyer le message
        if st.button("üöÄ Envoyer"):
            if user_input:
                # Analyser le sentiment
                sentiment = analyze_sentiment(user_input)
                st.write(f"**Sentiment d√©tect√©** : {sentiment}")

                # Interroger ChatGPT
                response = ask_openai(user_input, st.session_state.context)
                st.write(f"**ü§ñ Agent** : {response}")

                # Ajouter au contexte
                st.session_state.context.append({"role": "üôã Moi", "content": user_input})
                st.session_state.context.append({"role": "üëæ Agent Infinity", "content": response})

                # Mettre √† jour la zone de conversation
                update_conversation()
            else:
                st.warning("‚ö†Ô∏è Veuillez √©crire un message avant d'envoyer.")


            # Bouton pour effacer l'historique
            if st.button("üóëÔ∏è Effacer l'historique"):
                st.session_state.context = []
                update_conversation()
                st.success("Historique effac√© !")


# Easter egg
if st.sidebar.button("üéÅ Surprise !"):
    jokes = [
        "Pourquoi les robots ne prennent-ils jamais de vacances ? Parce qu'ils ont d√©j√† trop de vis ! ü§ñüîß",
        "Comment s'appelle un robot qui fait toujours la m√™me chose ? Un automate. üõ†Ô∏è",
        "Que dit un robot quand il tombe en panne ? 'J'ai un bug-out-bag !' üêû",
        "Pourquoi le robot a-t-il travers√© la route ? Pour aller √† l'autre circuit ! üõ£Ô∏è",
        "Pourquoi les ordinateurs n'aiment-ils pas la chaleur ? Parce qu'ils ont peur de surchauffer ! ‚òÄÔ∏èüíª",
        "Quel est le plat pr√©f√©r√© des robots ? Les algorithmes √† la sauce binaire ! üçΩÔ∏è",
        "Pourquoi les robots adorent-ils les jeux de soci√©t√© ? Parce qu'ils aiment les d√©fis sans fil ! üé≤",
        "Que dit un robot qui veut sortir ? 'J'ai besoin d'une mise √† jour d'ambiance !' üéâ"
    ]
    
    joke = random.choice(jokes)
    st.sidebar.write(joke)
#    speak_text(joke)


st.sidebar.write('---')
# Ajouter un droit d'auteur
now = datetime.datetime.now()
st.sidebar.write(f"Date : {now.strftime('%Y-%m-%d')} Heure : {now.strftime('%H:%M')}")
st.sidebar.write(f"¬© {now.year} Salam & Nesrine")